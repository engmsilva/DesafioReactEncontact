{"version":3,"sources":["Componets/ChangeLanguage/index.js","assets/logo.svg","pages/Auth/index.js"],"names":["Option","ChangeLanguage","React","useContext","ContextAPI","state","dispatch","language","value","style","width","onChange","type","payload","nested","className","intl","get","module","exports","Content","ConfirmEmail","useForm","formSignup","getFieldError","setFields","onResetError","field","name","errors","console","log","xs","span","offset","sm","md","lg","src","logo","alt","form","onFinish","auth","username","password","postIsAuth","navigate","layout","Item","validateTrigger","rules","required","whitespace","message","prefix","size","placeholder","min","hasFeedback","Password","htmlType","block"],"mappings":"wNAKQA,E,IAAAA,OAEO,SAASC,IAAkB,IAAD,EACbC,IAAMC,WAAWC,KADJ,mBAChCC,EADgC,KACzBC,EADyB,KAE/BC,EAAaF,EAAbE,SAMV,OACI,oCACA,uBAAQC,MAAOD,EAAUE,MAAO,CAAEC,MAAO,KAAOC,SANlD,SAA2BH,GACzBF,EAAS,CAAEM,KAAM,WAAYC,QAAS,CAACC,OAAQ,WAAYN,MAAOA,OAMhE,kBAACR,EAAD,CAAQQ,MAAM,SAAQ,0BAAMO,UAAU,uBAAuBC,IAAKC,IAAI,wBACtE,kBAACjB,EAAD,CAAQQ,MAAM,SAAQ,0BAAMO,UAAU,uBAAuBC,IAAKC,IAAI,4B,oBCnB5EC,EAAOC,QAAU,IAA0B,kC,iUCmBnCC,G,WAAAA,SAEO,SAASC,IAAe,MAEXnB,IAAMC,WAAWC,KAFN,mBAE9BC,EAF8B,KAG7BE,GAH6B,KAGhBF,EAAbE,UAH6B,EAIhB,IAAKe,UAAnBC,EAJ8B,oBAK9BC,EAA6BD,EAA7BC,cAAeC,EAAcF,EAAdE,UAEtB,SAASC,EAAaC,GAChBH,EAAcG,IAChBF,EAAU,CACR,CACEG,KAAMD,EACNE,OAAQ,MAqBlB,OA3BAC,QAAQC,IAAIxB,GA4BR,oCACD,2BACG,kBAACa,EAAD,CAASL,UAAU,iBACnB,uBAAKA,UAAU,kBACX,kBAAC,IAAD,OAEJ,2BACE,uBACEiB,GAAI,CAACC,KAAM,GAAIC,OAAQ,GACvBC,GAAI,CAACF,KAAM,GAAIC,OAAQ,GACvBE,GAAI,CAACH,KAAM,GAAIC,OAAQ,GACvBG,GAAI,CAACJ,KAAM,EAAGC,OAAQ,IAEtB,uBAAKnB,UAAU,cACb,yBAAKA,UAAU,aAAauB,IAAKC,IAAMC,IAAI,UAE7C,uBAAKzB,UAAU,cACb,uBAAKkB,KAAM,IACT,0BAAMlB,UAAU,oBACbC,IAAKC,IAAI,iBAGd,uBAAKgB,KAAM,IACX,uBACEQ,KAAMlB,EACNK,KAAK,aACLc,SAzCZ,SAAsBC,GACC,uBAAlBA,EAAKC,UAAuD,aAAlBD,EAAKE,UAChDC,aAAW,GACXC,mBAAS,UAETtB,EAAU,CACR,CACEG,KAAM,WACNC,OAAQ,CAACb,IAAKC,IAAI,4BAkCd+B,OAAO,YAEP,sBAAMC,KAAN,CACArB,KAAK,WACLsB,gBAAgB,SAChBC,MAAO,CACL,CACEC,UAAU,EACVC,YAAY,EACZC,QAAStC,IAAKC,IAAI,4BAEpB,CACEL,KAAM,QACN0C,QAAStC,IAAKC,IAAI,6BAIxB,uBACIsC,OAAQ,kBAAC,IAAD,CAAcxC,UAAU,wBAChCyC,KAAK,QACLC,YAAazC,IAAKC,IAAI,kBACtBN,SAAU,kBAAMe,EAAa,gBAIjC,sBAAMuB,KAAN,CACErB,KAAK,WACLsB,gBAAgB,SAChBC,MAAO,CACL,CACEC,UAAU,EACVE,QAAStC,IAAKC,IAAI,gCAEpB,CACEyC,IAAK,EACLJ,QAAStC,IAAKC,IAAI,gCAGtB0C,aAAW,GAET,sBAAOC,SAAP,CACEJ,KAAK,QACLD,OAAQ,kBAAC,IAAD,CAAcxC,UAAU,wBAChCJ,SAAU,kBAAMe,EAAa,aAC7B+B,YAAazC,IAAKC,IAAI,qBAG1B,sBAAMgC,KAAN,KACE,uBAAQO,KAAK,QAAQ5C,KAAK,UAAUiD,SAAS,SAASC,OAAK,GACxD9C,IAAKC,IAAI","file":"static/js/7.f91e6e50.chunk.js","sourcesContent":["import React from 'react';\nimport { ContextAPI } from '../../ContextAPI/context';\nimport intl from 'react-intl-universal';\nimport { Select } from 'antd';\n\nconst { Option} = Select;\n\nexport default function ChangeLanguage() {\n  const [state, dispatch] = React.useContext(ContextAPI);\n  const { language } = state;\n\n  function onChangeLanguange(value) {\n    dispatch({ type: \"setState\", payload: {nested: \"language\", value: value} });\n  }\n\nreturn (\n    <>\n    <Select value={language} style={{ width: 120 }} onChange={onChangeLanguange}>\n      <Option value=\"pt-BR\"><span className=\"select_text_toolbar\">{intl.get('button.LANGUAGE.BR')}</span></Option>\n      <Option value=\"en-US\"><span className=\"select_text_toolbar\">{intl.get('button.LANGUAGE.EN')}</span></Option>\n    </Select>\n    </>\n  );\n}","module.exports = __webpack_public_path__ + \"static/media/logo.c028fec9.svg\";","import React from 'react';\nimport { ContextAPI } from '../../ContextAPI/context';\nimport intl from 'react-intl-universal';\nimport { navigate } from 'hookrouter';\nimport { postIsAuth } from './localStorage';\nimport {\n          Row,\n          Col,\n          Layout,\n          Form,\n          Input,\n          Button,\n        } from 'antd';\n\nimport ChangeLanguage from '../../Componets/ChangeLanguage';\nimport logo from '../../assets/logo.svg';\nimport { LockOutlined, UserOutlined } from '@ant-design/icons';\nimport './styles.css';\n\nconst { Content } = Layout;\n\nexport default function ConfirmEmail() {\n  // eslint-disable-next-line no-unused-vars\n  const [state, dispatch] = React.useContext(ContextAPI);\n  const { language } = state;\n  const [formSignup] = Form.useForm();\n  const {getFieldError, setFields } = formSignup;\nconsole.log(language);\n  function onResetError(field) {\n    if (getFieldError(field)) {\n      setFields([\n        {\n          name: field,\n          errors: [],\n        },\n\n      ]);\n    }\n  }\n\n  function handleSubmit(auth) {\n    if(auth.username === \"admin@pantheon.com\" && auth.password === \"12345678\") {\n      postIsAuth(true);\n      navigate('/home');\n    } else {\n      setFields([\n        {\n          name: 'password',\n          errors: [intl.get('LOGIN.ERRORS.SIGNUP')],\n        },\n     ]);\n    }\n  }\n\nreturn (\n    <>\n   <Layout>\n      <Content className=\"content_login\">\n      <Row className=\"language-login\">\n          <ChangeLanguage />\n      </Row>\n      <Row>\n        <Col\n          xs={{span: 18, offset: 4}}\n          sm={{span: 18, offset: 4}}\n          md={{span: 12, offset: 8}}\n          lg={{span: 8, offset: 8}}\n        >\n          <Row className=\"logo_login\">\n            <img className=\"logoSignup\" src={logo} alt=\"logo\"/>\n          </Row>\n          <Row className=\"card_login\">\n            <Col span={24}>\n              <span className=\"title_card_login\">\n                {intl.get('LOGIN.TITLE')}\n              </span>\n            </Col>\n            <Col span={24}>\n            <Form\n              form={formSignup}\n              name=\"formSignup\"\n              onFinish={handleSubmit}\n              layout=\"vertical\"\n            >\n              <Form.Item\n              name=\"username\"\n              validateTrigger=\"onBlur\"\n              rules={[\n                {\n                  required: true,\n                  whitespace: true,\n                  message: intl.get('LOGIN.ERRORS.EMPATYMAIL')\n                },\n                {\n                  type: 'email',\n                  message: intl.get('LOGIN.ERRORS.VALIDMAIL'),\n                }\n              ]}\n            >\n            <Input\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\n                size=\"large\"\n                placeholder={intl.get('LOGIN.USERNAME')}\n                onChange={() => onResetError('username')}\n                />\n            </Form.Item>\n\n            <Form.Item\n              name='password'\n              validateTrigger=\"onBlur\"\n              rules={[\n                {\n                  required: true,\n                  message: intl.get('LOGIN.ERRORS.EMPATYPASSWORD'),\n                },\n                {\n                  min: 8,\n                  message: intl.get('LOGIN.ERRORS.VALIDPASSWORD')\n                },\n              ]}\n              hasFeedback\n              >\n                <Input.Password\n                  size=\"large\"\n                  prefix={<LockOutlined className=\"site-form-item-icon\" />}\n                  onChange={() => onResetError('password')}\n                  placeholder={intl.get('LOGIN.PASSWORD')}\n                  />\n              </Form.Item>\n              <Form.Item >\n                <Button size=\"large\" type=\"primary\" htmlType=\"submit\" block>\n                  {intl.get('LOGIN.ACCESS')}\n                </Button>\n              </Form.Item>\n            </Form>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      </Content>\n    </Layout>\n    </>\n  );\n}"],"sourceRoot":""}